# File: PlatformAutomation/templates/nodejs-ci-cd.yml

parameters:
- name: appName
  type: string
- name: solutionPath
  type: string # Path to the root of the Node.js project (e.g., 'src/my-react-app')
- name: techStack
  type: string
- name: containerRegistryServiceConnection
  type: string
- name: azureSubscriptionServiceConnection
  type: string
- name: agentPoolName
  type: string
- name: devDeploymentType
  type: string
- name: devAppServiceName
  type: string
- name: devResourceGroupName
  type: string
- name: devAppUrlForTests
  type: string
- name: qaDeploymentType
  type: string
- name: qaGitOpsRepoUrl
  type: string
- name: qaManifestPath
  type: string
- name: qaK8sImageName
  type: string
- name: qaAppUrlForTests
  type: string
- name: prodDeploymentType
  type: string
- name: prodGitOpsRepoUrl
  type: string
- name: prodManifestPath
  type: string
- name: prodK8sImageName
  type: string
- name: prodAppUrlForTests
  type: string

stages:
- stage: Build
  displayName: 'CI - Build & Test'
  jobs:
  - job: BuildAndTest
    pool:
      name: ${{ parameters.agentPoolName }}
    steps:
    - template: shared/build-app.yml@platform_templates
      parameters:
        appName: ${{ parameters.appName }}
        techStack: ${{ parameters.techStack }}
        solutionPath: ${{ parameters.solutionPath }}
        containerRegistryServiceConnection: ${{ parameters.containerRegistryServiceConnection }}
    
    - template: shared/run-tests.yml@platform_templates
      parameters:
        techStack: ${{ parameters.techStack }}
        solutionPath: ${{ parameters.solutionPath }}

- stage: DeployToDev
  displayName: 'CD - Deploy to DEV (ASE)'
  dependsOn: Build
  condition: and(succeeded(), eq('${{ parameters.devDeploymentType }}', 'azureWebApp'))
  jobs:
  - deployment: DeployDev
    pool:
      name: ${{ parameters.agentPoolName }}
    environment: 'dev'
    strategy:
      runOnce:
        deploy:
          steps:
          - template: shared/deploy-app.yml@platform_templates
            parameters:
              environmentName: 'dev'
              deploymentType: ${{ parameters.devDeploymentType }}
              appName: ${{ parameters.appName }}
              azureSubscriptionServiceConnection: ${{ parameters.azureSubscriptionServiceConnection }}
              appServiceName: ${{ parameters.devAppServiceName }}
              resourceGroupName: ${{ parameters.devResourceGroupName }}
              appUrlForTests: ${{ parameters.devAppUrlForTests }}

- stage: DeployToQA
  displayName: 'CD - Deploy to QA (Argo CD)'
  dependsOn: DeployToDev
  condition: and(succeeded(), eq('${{ parameters.qaDeploymentType }}', 'openShift'))
  jobs:
  - deployment: DeployQA
    pool:
      name: ${{ parameters.agentPoolName }}
    environment: 'qa'
    strategy:
      runOnce:
        deploy:
          steps:
          - template: shared/deploy-app.yml@platform_templates
            parameters:
              environmentName: 'qa'
              deploymentType: ${{ parameters.qaDeploymentType }}
              appName: ${{ parameters.appName }}
              gitOpsRepoUrl: ${{ parameters.qaGitOpsRepoUrl }}
              manifestPath: ${{ parameters.qaManifestPath }}
              k8sImageName: ${{ parameters.qaK8sImageName }}
              appUrlForTests: ${{ parameters.qaAppUrlForTests }}

- stage: DeployToProd
  displayName: 'CD - Deploy to PROD (Argo CD)'
  dependsOn: DeployToQA
  condition: and(succeeded(), eq('${{ parameters.prodDeploymentType }}', 'openShift'))
  jobs:
  - deployment: DeployProd
    pool:
      name: ${{ parameters.agentPoolName }}
    environment: 'prod'
    strategy:
      runOnce:
        deploy:
          steps:
          - template: shared/deploy-app.yml@platform_templates
            parameters:
              environmentName: 'prod'
              deploymentType: ${{ parameters.prodDeploymentType }}
              appName: ${{ parameters.appName }}
              gitOpsRepoUrl: ${{ parameters.prodGitOpsRepoUrl }}
              manifestPath: ${{ parameters.prodManifestPath }}
              k8sImageName: ${{ parameters.prodK8sImageName }}
              appUrlForTests: ${{ parameters.prodAppUrlForTests }}